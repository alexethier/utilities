#!/bin/bash
# Prototype script for konnecting to K8 Pods.
# Will try to find a running pod with matching name and automatically login to it.
# Has options to copy in files or login as different users.

POD_NAME=""
USER=""
COPY=""
DESTINATION=""
REMOVE="false"
LIST="false"
EXECUTE="false"
EXECUTE_COMMAND=""

function help() {
    echo "Usage: kube_connect -n <pod_name> [ -u <username> ]"
    echo " -n : Pod name to find and connect to."
    echo " -u : Username for connection to pod."
    echo " -c <filename> : Path to file to copy into the container."
    echo " -d <destination> : Path inside pod where copied file is moved to."
    echo " -r : Remove pod."
    echo " -l : List events."
    echo " -e : Execute command."
    echo " -v : Verbose log level."
}

while [[ $# > 0 ]]
do
    key="$1"
    value="$2"

    # If arguments come in the form a=b
    if [[ $1 == *'='* ]]
    then
        IFS='=' read -ra key_pair <<< "$1"
        key="${key_pair[0]}"
        value="${key_pair[1]}"
    fi

    case $key in
        -n)
            POD_NAME="$value"
            shift
            ;;
        --name)
            POD_NAME="$value"
            shift
            ;;
        -u)
            USER="$value"
            shift
            ;;
        --user)
            USER="$value"
            shift
            ;;
        -c)
            COPY="$value"
            shift
            ;;
        --copy)
            COPY="$value"
            shift
            ;;
        -d)
            DESTINATION="$value"
            shift
            ;;
        --dest)
            DESTINATION="$value"
            shift
            ;;
        -r)
            REMOVE="true"
            ;;
        --remove)
            REMOVE="true"
            ;;
        -l)
            LIST="true"
            ;;
        --list)
            LIST="true"
            ;;
        -e)
            EXECUTE="true"
            EXECUTE_COMMAND="$value"
            if [ -n "$EXECUTE_COMMAND" ]; then
              shift
            fi
            ;;
        --execute)
            EXECUTE="true"
            EXECUTE_COMMAND="$value"
            if [ -n "$EXECUTE_COMMAND" ]; then
              shift
            fi
            ;;
        -v)
            set -x
            ;;
        -h)
            help
            exit 0
            ;;
        *)
            echo "Unknown option passed: $key"
            help
            exit 1
            ;;
    esac
    shift
done

# Save settings
if [ -f ~/.aetmp/kube_connect.txt ]; then
    if [ ! -n "$USER" ]; then
        USER=`cat ~/.aetmp/kube_connect.txt | grep "USER" | cut -d '=' -f2`
    fi
    if [ ! -n "$POD_NAME" ]; then
        POD_NAME=`cat ~/.aetmp/kube_connect.txt | grep "POD_NAME" | cut -d '=' -f2`
    fi
    if [[ "$EXECUTE" == "true" && ! -n "$REMOTE_LOCATION" ]]; then
        REMOTE_LOCATION=`cat ~/.aetmp/kube_connect.txt | grep "REMOTE_LOCATION" | cut -d '=' -f2`
    fi
fi

if [ ! -n "$POD_NAME" ]; then
    echo "Missing pod name, supply with -n"
    exit 1
fi

if [ ! -n "$POD_NAME" ]; then
    echo "Missing user, supply with -u"
    exit 1
fi

mkdir -p ~/.aetmp
echo "USER=$USER" > ~/.aetmp/kube_connect.txt
echo "POD_NAME=$POD_NAME" >> ~/.aetmp/kube_connect.txt

# Check number of inputs
operations=0
if [ "$REMOVE" == "true" ]; then
  operations=$((operations+1))
fi
if [ -n "$COPY" ]; then
  operations=$((operations+1))
fi
if [ "$LIST" == "true" ]; then
  operations=$((operations+1))
fi
# Note that EXECUTE intentionally does not increment the operations count.
if [ "$operations" -gt 1 ]; then
  echo "Too many operations requested."
  exit 1
fi

# Main code block
if [ "$LIST" == "true" ]; then
    kubectl get events --sort-by=".lastTimestamp" | grep -e "pod/.*${POD_NAME}"
    exit 0
fi

pod_id=`kubectl get pods | grep Running | cut -d' ' -f1 | grep "$POD_NAME"`
if [ -z "$pod_id" ]; then
    echo "Could not find running pod with matching name $POD_NAME"
    exit 1
fi

num_pods="$(echo "$pod_id" | wc -l)"
if [[ "$num_pods" != "1" ]]; then
    echo "Found $num_pods matching pod names, pick a more specific name (-n)."
    echo ""
    echo "Matched pod names"
    echo "$pod_id"
    exit 1
fi

if [ "$REMOVE" == "true" ]; then
    kubectl delete pod $pod_id
fi

if [ -n "$COPY" ]; then
    FILENAME=`basename $COPY`

    echo "Copying $COPY to $pod_id at temp path /tmp/$FILENAME"
    kubectl cp $COPY $pod_id:/tmp/$FILENAME
    if [ "$USER" != "root" ]; then
        kubectl exec $pod_id -- /bin/bash -c "chown $USER /tmp/$FILENAME"
    fi

    if [ -n "$DESTINATION" ]; then
        echo "Moving $FILENAME inside pod to $DESTINATION"
        kubectl exec $pod_id -- /bin/bash -c "mv /tmp/$FILENAME $DESTINATION"
        kubectl exec $pod_id -- /bin/bash -c "ls -l $DESTINATION"
    fi
fi

if [ "$EXECUTE" == "true" ]; then
    if [ "$USER" == "root" ]; then
        echo "Connecting to pod $pod_id as root"
        kubectl exec --stdin --tty $pod_id -- $EXECUTE_COMMAND
    else
        echo "Connecting to pod $pod_id as $USER"
        kubectl exec --stdin --tty $pod_id -- su $USER -c "$EXECUTE_COMMAND"
    fi

    if [ "$operations" -eq "0" ]; then
      # If only execute is called, increment the operation count
      operations=$((operations+1))
    fi
fi

if [ "$operations" -eq "0" ]; then

    if [ "$USER" == "root" ]; then
        echo "Connecting to pod $pod_id as root"
        kubectl exec --stdin --tty $pod_id -- /bin/bash
    else
        echo "Connecting to pod $pod_id as $USER"
        kubectl exec --stdin --tty $pod_id -- /bin/bash -c "su $USER"
    fi
fi
