#!/bin/bash
# Work with AWS Cloudwatch Logs

set -e
IFS=$'\n\t'

AWS_PROFILE=""
LOG_GROUP_NAME=""
MAX_ITEMS=200
START_TIME_AGE_HOURS=1
FILTER_PATTERN=""
QUERY=""

while [[ $# > 0 ]]
do
    key="$1"
    value="$2"

    case $key in
        -n)
            LOG_GROUP_NAME=$value
            shift
            ;;
        --name)
            LOG_GROUP_NAME=$value
            shift
            ;;
        -s)
            START_TIME_AGE_HOURS=$value
            shift
            ;;
        --start)
            START_TIME_AGE_HOURS=$value
            shift
            ;;
        -f)
            # Example filter patterns
            # Simple filter: -f 'value'
            # Advanced filter: -f "{ $.X-Request-Id = *9e05e908-c411-4517-8da0-b8d1494ba440* }"
            FILTER_PATTERN=$value
            shift
            ;;
        --filter)
            FILTER_PATTERN=$value
            shift
            ;;
        -q)
            # Note this option queries data after being retrieved from AWS and can break downstream parsing.
            # Example query: events[?message == '*error*']
            QUERY=$value
            shift
            ;;
        --query)
            QUERY=$value
            shift
            ;;
        -m)
            MAX_ITEMS=$value
            shift
            ;;
        --max)
            MAX_ITEMS=$value
            shift
            ;;
        -p)
            AWS_PROFILE=$value
            shift
            ;;
        --profile)
            AWS_PROFILE=$value
            shift
            ;;
        -h)
            echo "Configurable options: -n <LOG_GROUP_NAME> -s <START_TIME_AGE_HR> -f <FILTER_PATTERN> -m <MAX_ITEMS> -p <AWS_PROFILE>"
            echo "Boolean flags: "
            exit 1
            ;;
        --help)
            echo "Configurable options: -n <LOG_GROUP_NAME> -s <START_TIME_AGE_HR> -f <FILTER_PATTERN> -m <MAX_ITEMS> -p <AWS_PROFILE>"
            echo "Boolean flags: "
            exit 1
            ;;
        -v)
            set -x
            ;;
        *)
            echo "Unknown option passed: $key"
            exit 1
            ;;
    esac
    shift
done

if [ "$LOG_GROUP_NAME" == "" ]; then
  echo "Must provide -n <LOG_GROUP_NAME>"
  exit 1
fi


start_time_age_seconds=`expr $START_TIME_AGE_HOURS \* 60 \* 60`
start_time=`expr 1000 \* $(date -r $(date +%s) -v -${start_time_age_seconds}S +%s)`

main() {

  aws_profile_option=""
  if [ "$AWS_PROFILE" != "" ]; then
    aws_profile_option=" --profile $AWS_PROFILE "
  fi

  filter_option=""
  if [ "$FILTER_PATTERN" != "" ]; then
    filter_option=" --filter-pattern \"$FILTER_PATTERN\" "
  fi

  query_option=""
  if [ "$QUERY" != "" ]; then
    query_option=" --query \"$QUERY\" "
  fi

  run_command="aws $aws_profile_option logs filter-log-events --log-group-name $LOG_GROUP_NAME --start-time $start_time --max-items $MAX_ITEMS $filter_option $query_option"
  response=`eval $run_command`
  next_token=`echo $response | jq '.NextToken'`
  parsed_response=`echo $response | jq -r '[ .events[] | { timestamp: (.timestamp / 1000), message: .message } | .timestamp |= strftime("%Y-%m-%d %H:%M:%S") | .message as $mes | .timestamp as $tim | try (.message |= fromjson.msg) catch ({ message: $mes, timestamp: $tim }) ] | map(.timestamp + ": " + .message) | map(rtrimstr("\n")) | .[]'`
  echo "$parsed_response"

}

main
