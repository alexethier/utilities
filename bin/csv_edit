#!/usr/bin/env python3

# This script allows simple modification of csv files

import json
import sys
import argparse
import os

def parse_csv_line(line):
  return line.split(',')

def process_header(line, add_args, delete_column_names):
  new_headers_set = set()
  delete_indicies = []

  headers = parse_csv_line(line)
  headers_set = set(headers)
  if delete_column_names:
    for delete_column_name in delete_column_names:
      match = False
      for i in range(0,len(headers)):
        if headers[i] == delete_column_name:
          delete_indicies.append(i)
          match = True
      if not match:
        raise Exception(f"No header for delete column: {delete_column_name}" + os.linesep)
  delete_indicies.sort(reverse = True)

  output_headers = headers

  # Handle delete columns
  for delete_index in delete_indicies:
    output_headers = output_headers[0:delete_index] + output_headers[delete_index+1:]

  # Handle add columns
  for add_arg in add_args:
    new_column_name = add_arg[0]
    if new_column_name in headers_set or new_column_name in new_headers_set:
      raise Exception(f"Duplicate header name already exists: {new_column_name}" + os.linesep)

    output_headers.append(new_column_name)
    new_headers_set.add(new_column_name)

  return headers, output_headers, delete_indicies

def process_row(line, add_args, delete_indicies):
  output_vals = parse_csv_line(line)

  # Handle delete columns
  for delete_index in delete_indicies:
    output_vals = output_vals[0:delete_index] + output_vals[delete_index+1:]

  # Handle add columns
  for add_arg in add_args:
    output_vals.append(add_arg[1])

  return output_vals


def main():

  parser = argparse.ArgumentParser()
  parser.add_argument("-a","--add", help="Adds a new column with default value.", nargs=2, action='append')
  parser.add_argument("-d","--delete", help="Deletes a column with default value.", action='append')
  parser.add_argument("-u","--update", help="Column name to update.", type=str)
  parser.add_argument("-n","--new-value", help="New value for update mode (required with -u).", type=str)
  parser.add_argument("-p","--print", help="Print input headers to stderr.", action="store_true")

  add_args = []
  delete_column_names = []
  args = vars(parser.parse_args())
  if args["add"]:
    add_args.extend(args["add"])
  if args["delete"]:
    delete_column_names.extend(args["delete"])
  
  # Validate update mode
  if args["update"] and not args["new_value"]:
    parser.error("-n/--new-value is required when -u/--update is specified")
  if args["new_value"] and not args["update"]:
    parser.error("-u/--update must be specified when using -n/--new-value")

  first = True
  headers = []
  delete_indicies = []
  update_column_index = None

  for raw_line in sys.stdin:
    line = raw_line.rstrip('\n')

    # Process header
    if first:
      first = False
      headers, output_headers, delete_indicies = process_header(line, add_args, delete_column_names)

      if args["print"]:
        sys.stderr.write(", ".join(headers) + os.linesep)

      # Find update column index if in update mode
      if args["update"]:
        update_column_index = None
        for i, header in enumerate(headers):
          if header == args["update"]:
            update_column_index = i
            break
        if update_column_index is None:
          raise Exception(f"No header for update column: {args['update']}" + os.linesep)

      print(",".join(output_headers))

    elif add_args or delete_column_names: 
      output_vals = process_row(line, add_args, delete_indicies)
      print(",".join(output_vals))
    elif args["update"]:
      vals = parse_csv_line(line)
      vals[update_column_index] = args["new_value"]
      print(",".join(vals))
    else:
      print(line)

main()
