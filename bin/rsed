#!/bin/bash
set -e -o pipefail
IFS=$'\n\t'

# Recursive sed for MacOS
# It will operate on all files contained in the current working directory.
# Unless filepaths are supplied via stdin

print_help () {
  echo ""
  echo "rsed will run a sed find and replace recursively on all files in the current directory."
  echo ""
  echo "Basic usage: rsed 's/find/replace/g'"
  echo ""
  echo "Advanced usage: rsed -e 's/find/replace/g' -d '/path/to/dir' -f '/path/to/file.txt'"
}

EXPRESSION="$1"
NUM_ARGS="$#"
STDIN="false"
SED_DIR="."
SED_FILE=""

if [[ "$NUM_ARGS" != "1" || $1 = -* ]]; then

    EXPRESSION=""

    # Parse command line
    while [[ $# > 0 ]]
    do
        key="$1"
        value="$2"
    
        case $key in
            -h)
                print_help
                ;;
            --help)
                print_help
                ;;
            -e)
                EXPRESSION="$value"
                shift
                ;;
            --expression)
                EXPRESSION="$value"
                shift
                ;;
            -d)
                # Right trim '/'
                SED_DIR="$value"
                shift
                ;;
            --dir)
                SED_DIR="$value"
                shift
                ;;
            -f)
                SED_FILE="$value"
                shift
                ;;
            --file)
                SED_FILE="$value"
                shift
                ;;
            -v)
                set -x
                ;;
            *)
                echo "Unknown option passed: $key"
                print_help
                exit 1
                ;;
        esac
        shift
    done
fi

# Fix sed_dir
last_sed_dir_char=`echo "$SED_DIR" | rev | cut -c -1`
if [ "$last_sed_dir_char" == "/" ]; then
    SED_DIR=`echo $SED_DIR | rev | cut -c 2- | rev`
fi

apply_sed () {
  filepath="$1"

  if [ "$EXPRESSION" != "" ]; then
      SUFFIX=".tmp.delme.bak"
      files=`find $filepath -type f`
      for path in $files; do
          sed -i"$SUFFIX" -e "$EXPRESSION" $path
          rm -f "${path}${SUFFIX}"
      done
  fi
}

if [ "$SED_FILE" == "" ]; then
  while test ! -t 0 ; do
    read -r stdin
    STDIN="true"
    apply_sed "$stdin"
  done
fi

if [[ "$STDIN" == "false" ]]; then
  if [[ "$SED_FILE" != "" ]]; then
      apply_sed "${SED_FILE}"
  else
      apply_sed "${SED_DIR}"
  fi
fi
