#!/usr/bin/env python3

# This script formats log files that consist of json outputs
# It will unnest embedded json and expand newlines
# Usage: <some_program_which_streams_out_json_logs> | json_extractor

import sys
import json
import argparse

def coerce_json(input_val):
  if isinstance(input_val, dict):
    return input_val
  if isinstance(input_val, list):
    return input_val
  try:
    input_json = json.loads(input_val)
    if isinstance(input_json, dict) or isinstance(input_json, list):
      return input_json
  except ValueError as e:
    pass
  return False

def get_components(input_json):
  if isinstance(input_json, dict):
    for key in input_json:
      yield input_json[key]
  elif isinstance(input_json, list):
    for val in input_json:
      yield val
  
def extract(input_str):
  input_json = coerce_json(input_str)
  if input_json:

    if isinstance(input_json, dict):
      for key in input_json:
        component = input_json[key]
        if isinstance(component, str):
          component_json = coerce_json(component)
          if component_json:
            component_extracted, is_json = extract(component_json)
            input_json[key] = component_extracted
    elif isinstance(input_json, list):
      for index in range(0, len(input_json)):
        component = input_json[index]
        if isinstance(component, str):
          component_json = coerce_json(component)
          if component_json:
            component_extracted, is_json = extract(component_json)
            input_json[index] = component_extracted

    return input_json, True
  else:
    return input_str, False
        
def format_json(input_val):
  if isinstance(input_val , dict) or isinstance(input_val, list):
    return json.dumps(input_val, indent=4)
  else:
    return input_val
  
def get_keys(input_json, keys):
  if isinstance(input_json, dict):
    for key in keys:
      if key in input_json:
        yield input_json[key]
    for field in input_json:
      found = get_keys(input_json[field], keys)
      if found:
        return found
  elif isinstance(input_json, list):
    for item in input_json:
      found = get_keys(item, keys)
      if found:
        return found
  return None

def main():

  parser = argparse.ArgumentParser()
  parser.add_argument("--no-split-lines", help="Disable automatic splitting of new lines.", action="store_true")
  parser.add_argument("--key", help="If a line is json containing a key, only print the value of the key", action='append')
  args = vars(parser.parse_args())

  for raw_line in sys.stdin:
    line = raw_line.rstrip('\n')
    extracted = None
    is_json = False
    try:
      extracted, is_json = extract(line)
    except:
      print("[ERROR]: Extract failed to parse line:", flush=True)
      print(line, flush=True)

    if extracted:
      output_list = [ extracted ]
      if is_json:
        if args['key']:
          output_val = list(get_keys(extracted, args['key']))
          if output_val:
            output_list = output_val

      for output in output_list:
        if not args['no_split_lines']:
          formatted_output = format_json(output)
          for output_line in formatted_output.split(sep='\\n'):
            print(output_line, flush=True)
        else:
          print(output, flush=True)

main()
