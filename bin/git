#!/bin/bash
# set -x

GIT_PATH=""

if [ -f "/opt/homebrew/bin/git" ]; then
  GIT_PATH="/opt/homebrew/bin/git"
elif [ -f "/usr/bin/git" ]; then
  GIT_PATH="/usr/bin/git"
fi
if [ -z "$GIT_PATH" ]; then
  echo "Could not find git installation location."
  exit 1
fi

save() {
  current_branch=`git branch --show-current`
  TARGET_BRANCH="$current_branch"
  if [ ! -z "$1" ]; then
    TARGET_BRANCH="$1"
  fi

  if [ "$TARGET_BRANCH" != "$current_branch" ]; then
    $GIT_PATH checkout $TARGET_BRANCH
  fi

  latest_saved_version=`git branch | grep -E "aetmp[0-9]+" | cut -d'p' -f2 | sort -Vr | head -n 1`
  new_branch_name="aetmp$((latest_saved_version + 1))"
  $GIT_PATH checkout -b $new_branch_name
  $GIT_PATH checkout $current_branch
}

delete() {
  TARGET_BRANCH="$1"
  if [ -z "$TARGET_BRANCH" ]; then
     TARGET_BRANCH=`$GIT_PATH branch --show-current`
     $GIT_PATH checkout main
  fi
  save $TARGET_BRANCH
  $GIT_PATH branch -D $TARGET_BRANCH
}

rebase_self() {
  save
  $GIT_PATH rebase -i HEAD~10
}

pull_branch() {
  TARGET_BRANCH="$1"
  current_branch=`git branch --show-current`
  $GIT_PATH checkout $TARGET_BRANCH
  $GIT_PATH pull
  $GIT_PATH checkout $current_branch
}

print_branch_owners() {
  $GIT_PATH for-each-ref --format='%(refname:short) %(authorname)' refs/remotes/
}

if false; then
  echo "pass"
elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
  echo "Git wrapper is being used and overriding the git help command."
  echo "Run '$GIT_PATH -h' to show git help"
  echo ""
  echo "Options: save, delete, rebase, rebasem (rebases main)"
elif [[ "$1" == "save" ]]; then
  set -e
  save 
  set +e
elif [[ "$1" == "delete" ]]; then
  set -e
  TARGET_BRANCH="$2"
  if [ -z "$2" ]; then
    echo "No target branch specified"
  fi

  delete $TARGET_BRANCH
  set +e
# Do not override the actual rebase command, do not override if there is a second argument to the rebase command
elif [[ -z "$2" && "$1" == "rebase" ]]; then
  set -e
  rebase_self
  set +e
elif [[ "$1" == "rebasem" ]]; then
  target_branch="main"
  if [[ -n "$2" ]]; then
    target_branch="$2"
  fi
  set -e
  pull_branch $target_branch
  save
  $GIT_PATH rebase $target_branch
  set +e
elif [[ "$1" == "owner" || "$1" == "owners" ]]; then
  $GIT_PATH remote prune origin
  print_branch_owners
else
  # JGit will break if the user
  # sets their gpg format to ssh
  # because it doesn't support it
  # which breaks nifi compilation
  # to circumvent this, set the gpg format
  # everytime the cli is invoked.
  $GIT_PATH -c gpg.format=ssh "$@"
fi

