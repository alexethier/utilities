#!/bin/bash
# This script will search for an ec2 instance with matching name
# It will start it if it is stopped
# If it is running it will determine it's public ip address
# It will when try to make an ssh connection and forward address:ports accessible from the server.

set -e
IFS=$'\n\t'

USER=""
INSTANCE_NAME=""
INSTANCE_ID=""
REGION="us-east-1"
LOGIN=false
SSHUTTLE=false
USE_PORTS=false
PORTS=()
STOP=false
PORT_FORWARD_ADDRESS="127.0.0.1"

while [[ $# > 0 ]]
do
    key="$1"
    value="$2"

    case $key in
        -l)
            LOGIN=true
            ;;
        --login)
            LOGIN=true
            ;;
        -f)
            USE_PORTS=true
            ;;
        --forward)
            USE_PORTS=true
            ;;
        -p)
            USE_PORTS=true
            PORTS+=($value)
            shift
            ;;
        --port)
            USE_PORTS=true
            PORTS+=($value)
            shift
            ;;
        -s)
            SSHUTTLE=true
            ;;
        --sshuttle)
            SSHUTTLE=true
            ;;
        -n)
            INSTANCE_NAME=$value
            shift
            ;;
        --name)
            INSTANCE_NAME=$value
            shift
            ;;
        -i)
            INSTANCE_ID=$value
            shift
            ;;
        --instance-id)
            INSTANCE_ID=$value
            shift
            ;;
        -r)
            REGION=$value
            shift
            ;;
        --region)
            REGION=$value
            shift
            ;;
        -u)
            USER=$value
            shift
            ;;
        --user)
            USER=$value
            shift
            ;;
        -t)
            STOP=true
            ;;
        --stop)
            STOP=true
            ;;
        -a)
            PORT_FORWARD_ADDRESS=$value
            shift
            ;;
        --address-forward-port)
            PORT_FORWARD_ADDRESS=$value
            shift
            ;;
        -h)
            echo "Configurable options: -i <INSTANCE ID> -r <REGION> -u <USERNAME> -p <PORT> -a <PORT FORWARDING ADDRESS>"
            echo "Boolean flags: -l (login) ; -s (run sshuttle) -t (stop instance)"
            exit 1
            ;;
        --help)
            echo "Configurable options: -i <INSTANCE ID> -r <REGION> -u <USERNAME> -p <PORT> -a <PORT FORWARDING ADDRESS>"
            echo "Boolean flags: -l (login) ; -s (run sshuttle) -t (stop instance)"
            exit 1
            ;;
        -v)
            set -x
            ;;
        *)
            echo "Unknown option passed: $key"
            exit 1
            ;;
    esac
    shift
done

# Save settings
SAVE_FILE="~/.aetmp/ec2_login.txt"
if eval "test -f ${SAVE_FILE}" ; then
    if [[ ! -n "$INSTANCE_ID" && ! -n "$INSTANCE_NAME" ]]; then
        INSTANCE_ID=`eval "cat $SAVE_FILE | grep \"INSTANCE_ID\" | cut -d '=' -f2"`
    fi
    if [[ ! -n "$INSTANCE_ID" && ! -n "$INSTANCE_NAME" ]]; then
        INSTANCE_NAME=`eval "cat $SAVE_FILE | grep \"INSTANCE_NAME\" | cut -d '=' -f2"`
    fi
    if [ ! -n "$PORTS" ]; then
        PORTS_RAW=`eval "cat $SAVE_FILE | grep \"PORTS\" | cut -d '=' -f2"`
        IFS=', ' read -r -a PORTS <<< "$PORTS_RAW"
    fi
    if [ ! -n "$USER" ]; then
        USER=`eval "cat $SAVE_FILE | grep \"USER\" | cut -d '=' -f2"`
    fi
fi

if [[ ! -n "$INSTANCE_ID" && ! -n "$INSTANCE_NAME" ]]; then
    echo "Unable to determine ec2 instance id or name"
    exit 1
fi
if [[ "$USE_PORTS" == "true" && ! -n "$PORTS" ]]; then
    echo "Unable to determine ports"
    exit 1
fi
if [ ! -n "$USER" ]; then
    echo "Unable to determine user"
    exit 1
fi

mkdir -p ~/.aetmp
eval "echo \"INSTANCE_ID=$INSTANCE_ID\" > $SAVE_FILE"
eval "echo \"INSTANCE_NAME=$INSTANCE_NAME\" > $SAVE_FILE"
OUTPUT_PORTS=$(IFS=' ' ; echo "${PORTS[*]}")
eval "echo \"PORTS=$OUTPUT_PORTS\" >> $SAVE_FILE"
eval "echo \"USER=$USER\" >> $SAVE_FILE"

# Get Info
if [ -n "$INSTANCE_ID" ]; then
  info=`aws --region $REGION ec2 describe-instances --filters "Name=instance-id,Values=$INSTANCE_ID" --query 'Reservations[*].Instances[*]' --output json | jq -r '.[][]'`
fi
if [ -n "$INSTANCE_NAME" ]; then
  matched_instances=`aws ec2 describe-instances --filters "Name=tag:Name,Values=*$INSTANCE_NAME*" | jq '.Reservations'`
  length=`echo $matched_instances | jq '. | length'`
  if [ "$length" == "0" ]; then
    echo "Found 0 instances with name matching $INSTANCE_NAME"
    exit 1
  fi
  if [ "$length" != "1" ]; then
    echo "Found $length instances with name matching $INSTANCE_NAME:"
    names=`echo $matched_instances | jq -r '.[]["Instances"][]["Tags"][] | select(.Key == "Name") | .Value'`
    echo "$names"
    exit 1
  fi
  info=`echo $matched_instances | jq '.[]["Instances"][]'`
fi

state=$(echo $info | jq -r '.State.Name')
name=$(echo $info | jq -r '.Tags[] | select(.Key=="Name") | .Value')
id=$(echo $info | jq -r '.InstanceId')
echo "Instance $id ($name) is $state"

ensure_running() {
  if [ "$state" == "stopped" ]; then
    aws --region $REGION ec2 start-instances --instance-ids $id
  fi

  while [ "$state" != "running" ]; do
    sleep 5
    state=$(get_state)
    echo "Instance state is $state, waiting for it to be running"
  done
}

main() {

  if [ "$STOP" == "true" ]; then
    echo "Stopping instance $id"
    aws --region $REGION ec2 stop-instances --instance-ids $id
    exit 0
  else
    ensure_running
  fi
  
  PUBLIC_IP=`aws --region $REGION ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=instance-id,Values=$id" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output json | jq -r '.[][][]'`
  echo "Instance $id has public ip ${PUBLIC_IP}"

  if [ "$USE_PORTS" == "true" ]; then
    echo "Remote forwarding $PORT_FORWARD_ADDRESS:${PORTS[@]} on $id to localhost"
    connect_string=""
    for port in "${PORTS[@]}"; do
      connect_string="$connect_string -L $port:$PORT_FORWARD_ADDRESS:$port "
    done
    forward_command="ssh -o StrictHostKeyChecking=accept-new $connect_string $USER@$PUBLIC_IP -N"
    eval $forward_command
  fi
  
  if [ "$LOGIN" == "true" ]; then
    echo "Logging into $id ($PUBLIC_IP)"
    ssh -o StrictHostKeyChecking=accept-new $USER@$PUBLIC_IP
  fi
  
  if [ "$SSHUTTLE" == "true" ]; then
    subnets="0.0.0.0/0"
    echo "Connecting with sshuttle ($subnets) to $id ($PUBLIC_IP)"
    sshuttle -r $USER@$PUBLIC_IP $subnets
  fi
}

main
