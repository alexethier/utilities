#!/bin/bash
# This is a script to auto login to kinit - useful on corporate networks that support Kerberos authentication

USER="$1"
LOGIN_FILE="$2"
EXPIRES="0"

while true; do

  # In case the calling process spams autorestarts have a sleep up front to prevent spamming the krb server.
  sleep 1

  TICKETS=`klist --json`
  if [ "$TICKETS" == "{}" ]; then
    echo "[$(date)] No ticket found."
    ISSUED=999999
  else
    echo "[$(date)] Existing ticket"
    echo "$TICKETS"
    # Assumes we only ever have one ticket, or at least the first one is the one we care about
    EXPIRES=`klist --json | jq -r '.tickets[0]["Expires"]' | xargs -I {} date --date="{}" +"%s" | xargs -I {} /bin/bash -c 'echo "$(({} - $(date +%s)))"'`
    ISSUED=`klist --json | jq -r '.tickets[0]["Issued"]' | xargs -I {} date --date="{}" +"%s" | xargs -I {} /bin/bash -c 'echo "$(($(date +%s) - {}))"'`
    echo "Issued ${ISSUED}s ago, expires in ${EXPIRES}s"
  fi

  if [ "$ISSUED" -gt "3000" ]; then
    echo "[$(date)] Logging in with $USER and credentials $LOGIN_FILE"
    cat $LOGIN_FILE | kinit --password-file=STDIN $USER
  else
    SLEEP_TIME=$((3005 - ${ISSUED}))
    echo "[$(date)] Valid ticket found, sleeping for $SLEEP_TIME"
    sleep $SLEEP_TIME
  fi

  # For w.e. reason the expiration does not work.
  # Instead wait 50 minutes after the issue time
  #if [ "$EXPIRES" -lt "5000" ]; then
  #  echo "[$(date)] Logging in with $USER and credentials $LOGIN_FILE"
  #  cat $LOGIN_FILE | kinit --password-file=STDIN $USER
  #else
  #  echo "Valid ticket exits, long sleep"
  #  sleep 2000 # If initial tests work we should dynamically sleep based on the remaining expiration time
  #fi

  TICKETS=`klist --json`
  if [ "$TICKETS" -eq "{}" ]; then
    echo "[$(date)] Failed getting ticket, short sleep"
    sleep 60
  fi
done
