#!/bin/python
import argparse
import sys
import pprint
import os
import os.path
from stat import S_ISFIFO

class Refactor:

  def __init__(self):
    pass;

  def combine(self, all_find_options):

    # If there are more than two token lists, use recursion to combine all the lists together except the first one.
    if(len(all_find_options) > 2):
      current_options = all_find_options[1:]
      combinations = self.combine(current_options)
      new_all_find_options = []
      new_all_find_options.append(all_find_options[0])
      new_all_find_options.append(combinations)

      return self.combine(new_all_find_options)

    # If there are exactly two token lists combine them in all standard ways
    elif(len(all_find_options) > 1):
      combinations = []
      for first_token in all_find_options[0]:
        for second_token in all_find_options[1]:
          combinations.append(first_token + second_token)
          if second_token != "":
            combinations.append(first_token + " " + second_token)
            combinations.append(first_token + "_" + second_token)
            combinations.append(first_token + "-" + second_token)
          else:
            # If dummy variables are used then combining the tokens should not include a separator.
            combinations.append(first_token + second_token)
            combinations.append(first_token + second_token)
            combinations.append(first_token + second_token)

      return combinations

    else:
      # If there is one token list there is nothing to do but return it.
      return all_find_options[0]

  def computeCombinations(self, token_list):
    all_combinations = []
    for token in token_list:
      combination_options = []
      combination_options.append(token.lower())
      combination_options.append(token.upper())
      combination_options.append(token.title())

      all_combinations.append(combination_options)

    return self.combine(all_combinations)

  def pad_tokens(self, token_list, length):
    while length > 0:
      token_list.append("")
      length = length - 1
    return token_list

  # Pads the two lists so they are the same length
  def get_tokens(self, find_tokens, replace_tokens):

    token_object = {}

    difference = len(find_tokens) - len(replace_tokens)
    if difference > 0:
      token_object['find_tokens'] = find_tokens
      token_object['replace_tokens'] = self.pad_tokens(replace_tokens, difference)
    elif difference < 0:
      token_object['find_tokens'] = self.pad_tokens(find_tokens, -1 * difference)
      token_object['replace_tokens'] = replace_tokens
    else:
      token_object['find_tokens'] = find_tokens
      token_object['replace_tokens'] = replace_tokens

    return token_object

  def refactorFile(self, filepath, replace_map, plan=False):
    content = None
    with open(filepath, "r") as input_file:
      content = input_file.read()

    if(plan):
      matched_keys = {};
      for key in replace_map:
        if key in content:
          matched_keys[key] = replace_map[key]

      return matched_keys;
    else:
      for key in replace_map:
        content = content.replace(key, replace_map[key])

      with open(filepath, "w") as output_file:
        output_file.write(content)

  def renameFile(self, filepath, replace_map, plan=False):

    # Given a path only rename the basename
      dirname = os.path.dirname(filepath)
      basename = os.path.basename(filepath)
  
      for key in replace_map:
        basename = basename.replace(key, replace_map[key])

      newpath = os.path.join(dirname, basename)
      if newpath != filepath:
        if(plan):
          return newpath
        else:
          os.rename(filepath, newpath)

  def check_path(self, filepath):
    fullpath = os.path.abspath(filepath.rstrip('\n'))
    if os.path.exists(fullpath) and filepath != ".":
      return fullpath

  def run(self):

    parser = argparse.ArgumentParser(description="Intelligently refactor text files.")
    parser.add_argument("-i", "--input_file", nargs="*", help="Path to file(s) to edit.")
    parser.add_argument("-f", "--find", nargs="*", help="Ordered list of tokens to find.", required=True)
    parser.add_argument("-r", "--replace", nargs="*", help="Ordered list of tokens to replace.", required=True)
    parser.add_argument("-p", "--plan", action='store_true', default=False, help="The script will not modify any files.  It will show what replacements are planned.")
    parser.add_argument("-n", "--rename", action='store_true', default=False, help="Renames files and directories using the same replacement strategy.")

    args = parser.parse_args()

    # If there are more replace tokens than find tokens the code will run but we have to guess the separator and pattern to use.
    # Since this is unlikely to choose correctly it is better to just return an error.
    if(len(args.replace) > len(args.find)):
      sys.stderr.write("The number of replace tokens must not exceed the number of find tokens.  Try concatenating the replace tokens.\n")
      sys.exit(1)

    tokens = self.get_tokens(args.find, args.replace)
    find_tokens = tokens['find_tokens']
    replace_tokens = tokens['replace_tokens']

    # Because combinations are computed deterministically both lists will share the same ordering and can easily be mapped together.
    find_combinations = self.computeCombinations(find_tokens)
    replace_combinations = self.computeCombinations(replace_tokens)

    replace_map = {}
    for index in range(len(find_combinations)):
      find_combination = find_combinations[index]
      replace_combination = replace_combinations[index]
      replace_map[find_combination] = replace_combination

    # Datastructures to store planned changes
    all_changed_keys = {}
    all_changed_filepaths = {}

    input_filepaths = []
    if S_ISFIFO(os.fstat(0).st_mode):
      for line in sys.stdin:
        input_filepaths.append(line)
    if args.input_file != None:
      for filepath in args.input_file:
        if os.path.isfile(filepath):
          input_filepaths.append(filepath)
        else:
          print("WARNING: Invalid file path supplied: " + str(filepath))    

    filepaths = []
    for input_filepath in input_filepaths:
      fullpath = self.check_path(input_filepath)
      if fullpath != None:
        filepaths.append(fullpath)

    # If we rename files and directories we need to rename the bottom most files first
    # So get the full paths of the files and sort by length
    # This won't work with wonky inputs (weird relative paths or symlinks) but should work 99% of the time
    filepaths.sort(lambda x,y: cmp(len(y), len(x)))

    for filepath in filepaths:
      if os.path.isfile(filepath):
        if args.plan:
          changed_keys = self.refactorFile(filepath, replace_map, True)
          all_changed_keys.update(changed_keys)
        else:
          self.refactorFile(filepath, replace_map)
      if args.rename:
        if args.plan:
          new_filepath = self.renameFile(filepath, replace_map, True)
          if new_filepath != None:
            all_changed_filepaths[filepath] = new_filepath
        else:
          self.renameFile(filepath, replace_map)

    if args.plan:
      for key in all_changed_keys:
        print(key + " -> " + all_changed_keys[key])

      for key in all_changed_filepaths:
        print(key + " -> " + all_changed_filepaths[key])

refactor = Refactor();
refactor.run();
